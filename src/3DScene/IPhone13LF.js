/*
  Auto-generated by Spline
*/
import * as THREE from 'three'

import React, { Suspense, useEffect, useRef, useState } from 'react'
import { Canvas, useFrame, useLoader } from '@react-three/fiber'
import { TextureLoader } from 'three/src/loaders/TextureLoader'

import { Html, Mask, Image, Environment, useGLTF, ContactShadows, OrbitControls } from '@react-three/drei'
import useSpline from '@splinetool/r3f-spline'
import { PerspectiveCamera } from '@react-three/drei'

export default function IPhone13LF({ ready, app, open, ...props }) {
  const { nodes, materials } = useSpline('/IPhone13.splinecode')
  const image = useRef()
  const group = useRef()
  const vec = new THREE.Vector3()
  const colorMap = useLoader(TextureLoader, '/img/Lifebox/Lifebox01拷貝.png')
  // colorMap.flipY = false;
  // colorMap.repeat.set(0.5,1);
  colorMap.center = new THREE.Vector2(0.5, 0.5);
  colorMap.wrapS = THREE.RepeatWrapping;
  colorMap.wrapT = THREE.RepeatWrapping;
  colorMap.repeat.set(0.5, 1);
  colorMap.offset.set(0, 0);
  colorMap.repeat.x = - 1;

  // const [video_bike] = useState(() => Object.assign(document.createElement('video_bike'), { src: '/img/GPSlineA_2.mp4', crossOrigin: 'Anonymous', loop: true }))
  // const [video_MyLog] = useState(() => Object.assign(document.createElement('video_MyLog'), { src: '/img/MyLog14_SE3.mp4', crossOrigin: 'Anonymous', loop: true }))
  // useEffect(() => void (ready && video_bike.play()), [ready, video_bike])
  // useEffect(() => void (ready && video_MyLog.play()), [ready, video_MyLog]) 


  // const [video] = useState(() => Object.assign(document.createElement('video'), { src: app==="video_bike"?"/img/GPSlineA_2.mp4":"/img/MyLog14_SE3.mp4", crossOrigin: 'Anonymous', loop: true }))
  // const [video] = useState(() => Object.assign(document.createElement('video'), { src: app === "bike" ? "/img/GPSlineA_2.mp4" : "/img/MyLog14_SE3.mp4", crossOrigin: 'Anonymous', loop: true }))
  // const [video] = useState(() => Object.assign(document.createElement('video'), { src: "/img/MyLog14_SE3.mp4", crossOrigin: 'Anonymous', loop: true }))

  // useEffect(() => void (ready && video.play()), [ready, video])


  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    state.camera.position.lerp(vec.set(0, 0, open ? -20 : -32), 0.1)
    state.camera.lookAt(0, open ? 1.5 : 0, 0)
    if (open) {
      group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, open ? -Math.sin(t / 4) / 8 + 0.25 : 0, 0.1)
      group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, open ? -Math.cos(t / 8) / 4 : 0, 0.1)
      group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, open ? -Math.sin(t / 8) / 4 : 0, 0.1)
      group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, open ? (-2 + Math.sin(t)) / 3 : -4.3, 0.1)
    }
  })



  return (
    <group group ref={group} {...props} dispose={null}>
      <group name="iPhone 13 Pro" position={[0, 0, 0]} rotation={[0, 0.02, 0]}>
        <group name="Body" position={[90.66, -103.81, 35.71]} scale={[1.02, 1.02, 1.04]}>
          <mesh
            name="Screen Border"
            geometry={nodes['Screen Border'].geometry}
            material={materials['Black Border']}
            castShadow
            receiveShadow
            position={[93.79, -119.46, 82.04]}
            rotation={[-Math.PI, 0, Math.PI]}>
            <meshStandardMaterial color="orange" />
            <meshStandardMaterial
              map={colorMap} />

          </mesh>
          {/* <Image ref={image} rotation={[0, 0, 0]} position={[5, 5, 150]} scale={[112, 112]} transparent={true} opacity={1} raycast={() => null} url={"/img/Lifebox/Lifebox01拷貝.png"} /> */}

          {/* <Image ref={image} rotation={[0, 0, Math.PI / 2]} position={[5, 5, 150]} scale={[112, 112]} transparent={true} opacity={1} raycast={() => null} url={"/img/web/nftsearchsite.png"} /> */}
          <mesh
            name="Back Side"
            geometry={nodes['Back Side'].geometry}
            // material={materials.Metal}
            castShadow
            receiveShadow
            position={[94.17, -118.96, 59.55]}
            rotation={[-Math.PI, 0, Math.PI]}
          >
            <meshStandardMaterial color="#00509d" />

          </mesh>
          <mesh
            name="Metal Border"
            geometry={nodes['Metal Border'].geometry}
            // material={materials.Metal}
            castShadow
            receiveShadow
            position={[93.79, -119.46, 80.78]}
            rotation={[-Math.PI, 0, Math.PI]}
          >
            <meshStandardMaterial color="#00509d" />
          </mesh>
        </group>
      </group>
      {/* <OrbitControls /> */}

      {/* <PerspectiveCamera
          name="Default Camera"
          makeDefault={true}
          far={50000}
          near={50}
          fov={45}
          position={[0, 0, 1000]}
        >
          <directionalLight
            name="Default Directional Light"
            intensity={0.75}
            shadow-mapSize-width={1024}
            shadow-mapSize-height={1024}
            shadow-camera-near={-10000}
            shadow-camera-far={100000}
            position={[850000, 1300000, 1000000]}
          />
        </PerspectiveCamera> */}
    </group>
  )
}
