import * as THREE from 'three'
import React, { Suspense, useEffect, useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { Html, Mask, Environment, useGLTF, ContactShadows, OrbitControls } from '@react-three/drei'

// import { useSpring } from '@react-spring/core'
import { a as three } from '@react-spring/three'
// import { a as web } from '@react-spring/web'
import HeroPage from './inPage/HeroPage'

import './inPage/PC.css';



function SBox(props) {
  return (
      <mesh {...props}>
        <boxGeometry />
        <meshStandardMaterial color="orange" />
      </mesh>


  )
}

function HTMLBox(props) {
  return (
    <group {...props}>
      <mesh  scale={[10, 1, 1]}>
        <boxGeometry />
        <meshStandardMaterial color="red" />
      </mesh>
      <Html className="content" rotation={[-Math.PI / 2, 0, 0]} position={[0,0,0]} scale={[1,1, 1]}  occlude>
          <div className="wrapper">
            <HeroPage />
          </div>
        </Html>
    </group>

  )
}


function HBox(props) {
  return (
    <mesh {...props}>
      <boxGeometry />
      <meshStandardMaterial color="blue" />
    </mesh>
  )
}

const vec = new THREE.Vector3()

export default function MBPRModel({ open, hinge, ...props }) {
  const group = useRef()
  // Load model
  const { nodes, materials } = useGLTF('/mac-draco.glb')
  // Take care of cursor state on hover
  const [hovered, setHovered] = useState(false)
  useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered])
  // Make it float in the air when it's opened
  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    // state.camera.position.lerp(vec.set(0, 0, open ? -24 : -32), 0.1)
    // state.camera.lookAt(0, 0, 0)
    group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, open ? Math.cos(t / 2) / 8 + 0.25 : 0, 0.1)
    group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, open ? Math.sin(t / 4) / 4 : 0, 0.1)
    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, open ? Math.sin(t / 4) / 4 : 0, 0.1)
    group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, open ? (-2 + Math.sin(t)) / 3 : -4.3, 0.1)
  })
  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx
  // Events and spring animations were added afterwards
  return (
    <group ref={group} {...props}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => setHovered(false)}
      dispose={null}>

      <HBox castShadow position={[0, -2, -1.09]} scale={[10, 1, 1]} />

      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
        <group castShadow position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh castShadow material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
          <mesh castShadow material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />

          {/* <mesh castShadow material={materials['screen.001']} geometry={nodes['Cube008_2'].geometry} /> */}
          {/* <Mask id={1} colorWrite={false} depthWrite={false} geometry={nodes['Cube008_2'].geometry}  castShadow receiveShadow position={[0, 0, 9.89]}>
      
          </Mask> */}
          {/* <mesh castShadow geometry={nodes['Cube008_2'].geometry}>
            <meshPhysicalMaterial clearcoat={1} clearcoatRoughness={0} toneMapped={false}>
          
            </meshPhysicalMaterial>
          </mesh> */}
          <HTMLBox castShadow position={[0, -2, -1.09]} scale={[1, 1, 1]} />

          <SBox castShadow position={[0, 0, -0.09]} scale={[10, 1, 1]} />
          {/* <Html className="content-NB" rotation={[-Math.PI/2, 0, 0]} position={[0, -50, -11]} scale={10} transform occlude>
            <div className="wrapper-NB">
              <h1>34567890-</h1>
              <h1>34567890-</h1>
              <h1>34567890-</h1>
              <h1>34567890-</h1>
              <HeroPage />
            </div>
          </Html> */}
          {/* <Html className="content-NB" rotation={[-Math.PI / 2, 0, 0]} position={[0, -2, -1.09]} scale={1} transform occlude>
            <div className="wrapper-NB">
              <HeroPage />
            </div>
          </Html> */}
          {/* <Html className="content" rotation={[0,0 , 0]} position={[0, 0, 0]} scale={10}  transform occlude>
            <div className="wrapper">
              <HeroPage />
            </div>
          </Html> */}
          <mesh geometry={nodes['Cube008_2'].geometry}>
            <Html className="content" rotation={[-Math.PI / 2, 0, 0]} position={[0, 0.05, -0.09]} scale={0.18} transform occlude>
              <div className="wrapper">
                <HeroPage />
              </div>
            </Html>
            {/* Drei's HTML component can now "hide behind" canvas geometry */}
            {/* <meshPhongMaterial color="#33BBFF"  /> */}


            {/* <Html className="content" rotation-x={Math.PI / 2} position={[0, 0, -0.09]} transform occlude>
              <div className="wrapper">
              wewe  <HeroPage />wewew
              </div>
            </Html> */}
          </mesh>

        </group>
      </three.group>
      <mesh castShadow material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
      <group position={[0, -0.1, 3.39]}>
        <mesh castShadow material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
        <mesh castShadow material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
      </group>
      <mesh castShadow material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
    </group>
  )
}
